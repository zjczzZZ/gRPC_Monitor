// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMonitor.proto

#include "PMonitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuMessage_PMonitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemMessage_PMonitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetMessage_PMonitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMessage_PMonitor_2eproto;
class CpuMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuMessage> _instance;
} _CpuMessage_default_instance_;
class MemMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemMessage> _instance;
} _MemMessage_default_instance_;
class NetMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetMessage> _instance;
} _NetMessage_default_instance_;
class ProcessMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessMessage> _instance;
} _ProcessMessage_default_instance_;
class MonitorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorMessage> _instance;
} _MonitorMessage_default_instance_;
class ProcMonitorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcMonitorRequest> _instance;
} _ProcMonitorRequest_default_instance_;
class ShellExeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellExe> _instance;
} _ShellExe_default_instance_;
static void InitDefaultsscc_info_CpuMessage_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CpuMessage_default_instance_;
    new (ptr) ::CpuMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CpuMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuMessage_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpuMessage_PMonitor_2eproto}, {}};

static void InitDefaultsscc_info_MemMessage_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MemMessage_default_instance_;
    new (ptr) ::MemMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MemMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemMessage_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemMessage_PMonitor_2eproto}, {}};

static void InitDefaultsscc_info_MonitorMessage_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MonitorMessage_default_instance_;
    new (ptr) ::MonitorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MonitorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MonitorMessage_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MonitorMessage_PMonitor_2eproto}, {
      &scc_info_CpuMessage_PMonitor_2eproto.base,
      &scc_info_MemMessage_PMonitor_2eproto.base,
      &scc_info_NetMessage_PMonitor_2eproto.base,
      &scc_info_ProcessMessage_PMonitor_2eproto.base,}};

static void InitDefaultsscc_info_NetMessage_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetMessage_default_instance_;
    new (ptr) ::NetMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetMessage_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetMessage_PMonitor_2eproto}, {}};

static void InitDefaultsscc_info_ProcMonitorRequest_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcMonitorRequest_default_instance_;
    new (ptr) ::ProcMonitorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcMonitorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcMonitorRequest_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcMonitorRequest_PMonitor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessMessage_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProcessMessage_default_instance_;
    new (ptr) ::ProcessMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProcessMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMessage_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessMessage_PMonitor_2eproto}, {}};

static void InitDefaultsscc_info_ShellExe_PMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShellExe_default_instance_;
    new (ptr) ::ShellExe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShellExe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellExe_PMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellExe_PMonitor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PMonitor_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PMonitor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PMonitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PMonitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CpuMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CpuMessage, load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MemMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MemMessage, mem_use_),
  PROTOBUF_FIELD_OFFSET(::MemMessage, mem_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMessage, net_recv_rate_),
  PROTOBUF_FIELD_OFFSET(::NetMessage, net_send_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, proc_name_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, isrunning_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, cpu_load_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, mem_load_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, mem_use_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, net_recv_rate_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, net_send_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MonitorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MonitorMessage, cpum_),
  PROTOBUF_FIELD_OFFSET(::MonitorMessage, memm_),
  PROTOBUF_FIELD_OFFSET(::MonitorMessage, netm_),
  PROTOBUF_FIELD_OFFSET(::MonitorMessage, procm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcMonitorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcMonitorRequest, add_del_),
  PROTOBUF_FIELD_OFFSET(::ProcMonitorRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ShellExe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ShellExe, shellnum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CpuMessage)},
  { 6, -1, sizeof(::MemMessage)},
  { 13, -1, sizeof(::NetMessage)},
  { 20, -1, sizeof(::ProcessMessage)},
  { 32, -1, sizeof(::MonitorMessage)},
  { 41, -1, sizeof(::ProcMonitorRequest)},
  { 48, -1, sizeof(::ShellExe)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CpuMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MemMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MonitorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcMonitorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ShellExe_default_instance_),
};

const char descriptor_table_protodef_PMonitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016PMonitor.proto\032\033google/protobuf/empty."
  "proto\"\032\n\nCpuMessage\022\014\n\004load\030\001 \001(\001\"/\n\nMem"
  "Message\022\017\n\007mem_use\030\001 \001(\001\022\020\n\010mem_rate\030\002 \001"
  "(\001\":\n\nNetMessage\022\025\n\rnet_recv_Rate\030\001 \001(\001\022"
  "\025\n\rnet_send_Rate\030\002 \001(\001\"\231\001\n\016ProcessMessag"
  "e\022\021\n\tproc_Name\030\001 \001(\t\022\021\n\tisRunning\030\002 \001(\010\022"
  "\020\n\010cpu_load\030\003 \001(\001\022\020\n\010mem_load\030\004 \001(\001\022\017\n\007m"
  "em_use\030\005 \001(\001\022\025\n\rnet_recv_Rate\030\006 \001(\001\022\025\n\rn"
  "et_send_Rate\030\007 \001(\001\"\201\001\n\016MonitorMessage\022\031\n"
  "\004cpum\030\001 \001(\0132\013.CpuMessage\022\031\n\004memm\030\002 \001(\0132\013"
  ".MemMessage\022\031\n\004netm\030\003 \001(\0132\013.NetMessage\022\036"
  "\n\005procm\030\004 \003(\0132\017.ProcessMessage\"3\n\022ProcMo"
  "nitorRequest\022\017\n\007add_del\030\001 \001(\010\022\014\n\004name\030\002 "
  "\003(\t\"\034\n\010ShellExe\022\020\n\010shellnum\030\001 \001(\0052\303\001\n\013Gr"
  "pcService\022:\n\013MonitorTick\022\026.google.protob"
  "uf.Empty\032\017.MonitorMessage\"\0000\001\022C\n\022Process"
  "MonitorCtrl\022\023.ProcMonitorRequest\032\026.googl"
  "e.protobuf.Empty\"\000\0223\n\014ShellControl\022\t.She"
  "llExe\032\026.google.protobuf.Empty\"\000B\003\200\001\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PMonitor_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PMonitor_2eproto_sccs[7] = {
  &scc_info_CpuMessage_PMonitor_2eproto.base,
  &scc_info_MemMessage_PMonitor_2eproto.base,
  &scc_info_MonitorMessage_PMonitor_2eproto.base,
  &scc_info_NetMessage_PMonitor_2eproto.base,
  &scc_info_ProcMonitorRequest_PMonitor_2eproto.base,
  &scc_info_ProcessMessage_PMonitor_2eproto.base,
  &scc_info_ShellExe_PMonitor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PMonitor_2eproto_once;
static bool descriptor_table_PMonitor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PMonitor_2eproto = {
  &descriptor_table_PMonitor_2eproto_initialized, descriptor_table_protodef_PMonitor_2eproto, "PMonitor.proto", 764,
  &descriptor_table_PMonitor_2eproto_once, descriptor_table_PMonitor_2eproto_sccs, descriptor_table_PMonitor_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_PMonitor_2eproto::offsets,
  file_level_metadata_PMonitor_2eproto, 7, file_level_enum_descriptors_PMonitor_2eproto, file_level_service_descriptors_PMonitor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PMonitor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PMonitor_2eproto), true);

// ===================================================================

void CpuMessage::InitAsDefaultInstance() {
}
class CpuMessage::_Internal {
 public:
};

CpuMessage::CpuMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CpuMessage)
}
CpuMessage::CpuMessage(const CpuMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  load_ = from.load_;
  // @@protoc_insertion_point(copy_constructor:CpuMessage)
}

void CpuMessage::SharedCtor() {
  load_ = 0;
}

CpuMessage::~CpuMessage() {
  // @@protoc_insertion_point(destructor:CpuMessage)
  SharedDtor();
}

void CpuMessage::SharedDtor() {
}

void CpuMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuMessage& CpuMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuMessage_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void CpuMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CpuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  load_ = 0;
  _internal_metadata_.Clear();
}

const char* CpuMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CpuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double load = 1;
  if (!(this->load() <= 0 && this->load() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_load(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CpuMessage)
  return target;
}

size_t CpuMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CpuMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double load = 1;
  if (!(this->load() <= 0 && this->load() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CpuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CpuMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CpuMessage)
    MergeFrom(*source);
  }
}

void CpuMessage::MergeFrom(const CpuMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CpuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.load() <= 0 && from.load() >= 0)) {
    _internal_set_load(from._internal_load());
  }
}

void CpuMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CpuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuMessage::CopyFrom(const CpuMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CpuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuMessage::IsInitialized() const {
  return true;
}

void CpuMessage::InternalSwap(CpuMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(load_, other->load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemMessage::InitAsDefaultInstance() {
}
class MemMessage::_Internal {
 public:
};

MemMessage::MemMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemMessage)
}
MemMessage::MemMessage(const MemMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mem_use_, &from.mem_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_rate_) -
    reinterpret_cast<char*>(&mem_use_)) + sizeof(mem_rate_));
  // @@protoc_insertion_point(copy_constructor:MemMessage)
}

void MemMessage::SharedCtor() {
  ::memset(&mem_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_rate_) -
      reinterpret_cast<char*>(&mem_use_)) + sizeof(mem_rate_));
}

MemMessage::~MemMessage() {
  // @@protoc_insertion_point(destructor:MemMessage)
  SharedDtor();
}

void MemMessage::SharedDtor() {
}

void MemMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemMessage& MemMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemMessage_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void MemMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MemMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mem_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_rate_) -
      reinterpret_cast<char*>(&mem_use_)) + sizeof(mem_rate_));
  _internal_metadata_.Clear();
}

const char* MemMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double mem_use = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          mem_use_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mem_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mem_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mem_use = 1;
  if (!(this->mem_use() <= 0 && this->mem_use() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_mem_use(), target);
  }

  // double mem_rate = 2;
  if (!(this->mem_rate() <= 0 && this->mem_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mem_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemMessage)
  return target;
}

size_t MemMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mem_use = 1;
  if (!(this->mem_use() <= 0 && this->mem_use() >= 0)) {
    total_size += 1 + 8;
  }

  // double mem_rate = 2;
  if (!(this->mem_rate() <= 0 && this->mem_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MemMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemMessage)
    MergeFrom(*source);
  }
}

void MemMessage::MergeFrom(const MemMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mem_use() <= 0 && from.mem_use() >= 0)) {
    _internal_set_mem_use(from._internal_mem_use());
  }
  if (!(from.mem_rate() <= 0 && from.mem_rate() >= 0)) {
    _internal_set_mem_rate(from._internal_mem_rate());
  }
}

void MemMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemMessage::CopyFrom(const MemMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemMessage::IsInitialized() const {
  return true;
}

void MemMessage::InternalSwap(MemMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mem_use_, other->mem_use_);
  swap(mem_rate_, other->mem_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetMessage::InitAsDefaultInstance() {
}
class NetMessage::_Internal {
 public:
};

NetMessage::NetMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessage)
}
NetMessage::NetMessage(const NetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&net_recv_rate_, &from.net_recv_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_send_rate_) -
    reinterpret_cast<char*>(&net_recv_rate_)) + sizeof(net_send_rate_));
  // @@protoc_insertion_point(copy_constructor:NetMessage)
}

void NetMessage::SharedCtor() {
  ::memset(&net_recv_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_send_rate_) -
      reinterpret_cast<char*>(&net_recv_rate_)) + sizeof(net_send_rate_));
}

NetMessage::~NetMessage() {
  // @@protoc_insertion_point(destructor:NetMessage)
  SharedDtor();
}

void NetMessage::SharedDtor() {
}

void NetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetMessage& NetMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetMessage_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void NetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&net_recv_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_send_rate_) -
      reinterpret_cast<char*>(&net_recv_rate_)) + sizeof(net_send_rate_));
  _internal_metadata_.Clear();
}

const char* NetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double net_recv_Rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          net_recv_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double net_send_Rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          net_send_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double net_recv_Rate = 1;
  if (!(this->net_recv_rate() <= 0 && this->net_recv_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_net_recv_rate(), target);
  }

  // double net_send_Rate = 2;
  if (!(this->net_send_rate() <= 0 && this->net_send_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_net_send_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessage)
  return target;
}

size_t NetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double net_recv_Rate = 1;
  if (!(this->net_recv_rate() <= 0 && this->net_recv_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double net_send_Rate = 2;
  if (!(this->net_send_rate() <= 0 && this->net_send_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessage)
    MergeFrom(*source);
  }
}

void NetMessage::MergeFrom(const NetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.net_recv_rate() <= 0 && from.net_recv_rate() >= 0)) {
    _internal_set_net_recv_rate(from._internal_net_recv_rate());
  }
  if (!(from.net_send_rate() <= 0 && from.net_send_rate() >= 0)) {
    _internal_set_net_send_rate(from._internal_net_send_rate());
  }
}

void NetMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessage::CopyFrom(const NetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessage::IsInitialized() const {
  return true;
}

void NetMessage::InternalSwap(NetMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(net_recv_rate_, other->net_recv_rate_);
  swap(net_send_rate_, other->net_send_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessMessage::InitAsDefaultInstance() {
}
class ProcessMessage::_Internal {
 public:
};

ProcessMessage::ProcessMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcessMessage)
}
ProcessMessage::ProcessMessage(const ProcessMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proc_name().empty()) {
    proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  ::memcpy(&cpu_load_, &from.cpu_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&isrunning_) -
    reinterpret_cast<char*>(&cpu_load_)) + sizeof(isrunning_));
  // @@protoc_insertion_point(copy_constructor:ProcessMessage)
}

void ProcessMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessMessage_PMonitor_2eproto.base);
  proc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isrunning_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(isrunning_));
}

ProcessMessage::~ProcessMessage() {
  // @@protoc_insertion_point(destructor:ProcessMessage)
  SharedDtor();
}

void ProcessMessage::SharedDtor() {
  proc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessMessage& ProcessMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessMessage_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void ProcessMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proc_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isrunning_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(isrunning_));
  _internal_metadata_.Clear();
}

const char* ProcessMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proc_Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessMessage.proc_Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isRunning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isrunning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpu_load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cpu_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mem_load = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          mem_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mem_use = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          mem_use_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double net_recv_Rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          net_recv_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double net_send_Rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          net_send_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proc_Name = 1;
  if (this->proc_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proc_name().data(), static_cast<int>(this->_internal_proc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessMessage.proc_Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proc_name(), target);
  }

  // bool isRunning = 2;
  if (this->isrunning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isrunning(), target);
  }

  // double cpu_load = 3;
  if (!(this->cpu_load() <= 0 && this->cpu_load() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_load(), target);
  }

  // double mem_load = 4;
  if (!(this->mem_load() <= 0 && this->mem_load() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_mem_load(), target);
  }

  // double mem_use = 5;
  if (!(this->mem_use() <= 0 && this->mem_use() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_mem_use(), target);
  }

  // double net_recv_Rate = 6;
  if (!(this->net_recv_rate() <= 0 && this->net_recv_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_net_recv_rate(), target);
  }

  // double net_send_Rate = 7;
  if (!(this->net_send_rate() <= 0 && this->net_send_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_net_send_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessMessage)
  return target;
}

size_t ProcessMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proc_Name = 1;
  if (this->proc_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proc_name());
  }

  // double cpu_load = 3;
  if (!(this->cpu_load() <= 0 && this->cpu_load() >= 0)) {
    total_size += 1 + 8;
  }

  // double mem_load = 4;
  if (!(this->mem_load() <= 0 && this->mem_load() >= 0)) {
    total_size += 1 + 8;
  }

  // double mem_use = 5;
  if (!(this->mem_use() <= 0 && this->mem_use() >= 0)) {
    total_size += 1 + 8;
  }

  // double net_recv_Rate = 6;
  if (!(this->net_recv_rate() <= 0 && this->net_recv_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double net_send_Rate = 7;
  if (!(this->net_send_rate() <= 0 && this->net_send_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // bool isRunning = 2;
  if (this->isrunning() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessMessage)
    MergeFrom(*source);
  }
}

void ProcessMessage::MergeFrom(const ProcessMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proc_name().size() > 0) {

    proc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  if (!(from.cpu_load() <= 0 && from.cpu_load() >= 0)) {
    _internal_set_cpu_load(from._internal_cpu_load());
  }
  if (!(from.mem_load() <= 0 && from.mem_load() >= 0)) {
    _internal_set_mem_load(from._internal_mem_load());
  }
  if (!(from.mem_use() <= 0 && from.mem_use() >= 0)) {
    _internal_set_mem_use(from._internal_mem_use());
  }
  if (!(from.net_recv_rate() <= 0 && from.net_recv_rate() >= 0)) {
    _internal_set_net_recv_rate(from._internal_net_recv_rate());
  }
  if (!(from.net_send_rate() <= 0 && from.net_send_rate() >= 0)) {
    _internal_set_net_send_rate(from._internal_net_send_rate());
  }
  if (from.isrunning() != 0) {
    _internal_set_isrunning(from._internal_isrunning());
  }
}

void ProcessMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessMessage::CopyFrom(const ProcessMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMessage::IsInitialized() const {
  return true;
}

void ProcessMessage::InternalSwap(ProcessMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proc_name_.Swap(&other->proc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cpu_load_, other->cpu_load_);
  swap(mem_load_, other->mem_load_);
  swap(mem_use_, other->mem_use_);
  swap(net_recv_rate_, other->net_recv_rate_);
  swap(net_send_rate_, other->net_send_rate_);
  swap(isrunning_, other->isrunning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorMessage::InitAsDefaultInstance() {
  ::_MonitorMessage_default_instance_._instance.get_mutable()->cpum_ = const_cast< ::CpuMessage*>(
      ::CpuMessage::internal_default_instance());
  ::_MonitorMessage_default_instance_._instance.get_mutable()->memm_ = const_cast< ::MemMessage*>(
      ::MemMessage::internal_default_instance());
  ::_MonitorMessage_default_instance_._instance.get_mutable()->netm_ = const_cast< ::NetMessage*>(
      ::NetMessage::internal_default_instance());
}
class MonitorMessage::_Internal {
 public:
  static const ::CpuMessage& cpum(const MonitorMessage* msg);
  static const ::MemMessage& memm(const MonitorMessage* msg);
  static const ::NetMessage& netm(const MonitorMessage* msg);
};

const ::CpuMessage&
MonitorMessage::_Internal::cpum(const MonitorMessage* msg) {
  return *msg->cpum_;
}
const ::MemMessage&
MonitorMessage::_Internal::memm(const MonitorMessage* msg) {
  return *msg->memm_;
}
const ::NetMessage&
MonitorMessage::_Internal::netm(const MonitorMessage* msg) {
  return *msg->netm_;
}
MonitorMessage::MonitorMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MonitorMessage)
}
MonitorMessage::MonitorMessage(const MonitorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      procm_(from.procm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cpum()) {
    cpum_ = new ::CpuMessage(*from.cpum_);
  } else {
    cpum_ = nullptr;
  }
  if (from._internal_has_memm()) {
    memm_ = new ::MemMessage(*from.memm_);
  } else {
    memm_ = nullptr;
  }
  if (from._internal_has_netm()) {
    netm_ = new ::NetMessage(*from.netm_);
  } else {
    netm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MonitorMessage)
}

void MonitorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorMessage_PMonitor_2eproto.base);
  ::memset(&cpum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netm_) -
      reinterpret_cast<char*>(&cpum_)) + sizeof(netm_));
}

MonitorMessage::~MonitorMessage() {
  // @@protoc_insertion_point(destructor:MonitorMessage)
  SharedDtor();
}

void MonitorMessage::SharedDtor() {
  if (this != internal_default_instance()) delete cpum_;
  if (this != internal_default_instance()) delete memm_;
  if (this != internal_default_instance()) delete netm_;
}

void MonitorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorMessage& MonitorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorMessage_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void MonitorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MonitorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procm_.Clear();
  if (GetArenaNoVirtual() == nullptr && cpum_ != nullptr) {
    delete cpum_;
  }
  cpum_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && memm_ != nullptr) {
    delete memm_;
  }
  memm_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && netm_ != nullptr) {
    delete netm_;
  }
  netm_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MonitorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CpuMessage cpum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MemMessage memm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_memm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NetMessage netm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_netm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProcessMessage procm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MonitorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CpuMessage cpum = 1;
  if (this->has_cpum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cpum(this), target, stream);
  }

  // .MemMessage memm = 2;
  if (this->has_memm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::memm(this), target, stream);
  }

  // .NetMessage netm = 3;
  if (this->has_netm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::netm(this), target, stream);
  }

  // repeated .ProcessMessage procm = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_procm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MonitorMessage)
  return target;
}

size_t MonitorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MonitorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProcessMessage procm = 4;
  total_size += 1UL * this->_internal_procm_size();
  for (const auto& msg : this->procm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .CpuMessage cpum = 1;
  if (this->has_cpum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpum_);
  }

  // .MemMessage memm = 2;
  if (this->has_memm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memm_);
  }

  // .NetMessage netm = 3;
  if (this->has_netm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *netm_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MonitorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MonitorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MonitorMessage)
    MergeFrom(*source);
  }
}

void MonitorMessage::MergeFrom(const MonitorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MonitorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  procm_.MergeFrom(from.procm_);
  if (from.has_cpum()) {
    _internal_mutable_cpum()->::CpuMessage::MergeFrom(from._internal_cpum());
  }
  if (from.has_memm()) {
    _internal_mutable_memm()->::MemMessage::MergeFrom(from._internal_memm());
  }
  if (from.has_netm()) {
    _internal_mutable_netm()->::NetMessage::MergeFrom(from._internal_netm());
  }
}

void MonitorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MonitorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorMessage::CopyFrom(const MonitorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MonitorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMessage::IsInitialized() const {
  return true;
}

void MonitorMessage::InternalSwap(MonitorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  procm_.InternalSwap(&other->procm_);
  swap(cpum_, other->cpum_);
  swap(memm_, other->memm_);
  swap(netm_, other->netm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcMonitorRequest::InitAsDefaultInstance() {
}
class ProcMonitorRequest::_Internal {
 public:
};

ProcMonitorRequest::ProcMonitorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProcMonitorRequest)
}
ProcMonitorRequest::ProcMonitorRequest(const ProcMonitorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      name_(from.name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  add_del_ = from.add_del_;
  // @@protoc_insertion_point(copy_constructor:ProcMonitorRequest)
}

void ProcMonitorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcMonitorRequest_PMonitor_2eproto.base);
  add_del_ = false;
}

ProcMonitorRequest::~ProcMonitorRequest() {
  // @@protoc_insertion_point(destructor:ProcMonitorRequest)
  SharedDtor();
}

void ProcMonitorRequest::SharedDtor() {
}

void ProcMonitorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcMonitorRequest& ProcMonitorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcMonitorRequest_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void ProcMonitorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcMonitorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  add_del_ = false;
  _internal_metadata_.Clear();
}

const char* ProcMonitorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool add_del = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_del_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcMonitorRequest.name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcMonitorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcMonitorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool add_del = 1;
  if (this->add_del() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_add_del(), target);
  }

  // repeated string name = 2;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcMonitorRequest.name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcMonitorRequest)
  return target;
}

size_t ProcMonitorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcMonitorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  // bool add_del = 1;
  if (this->add_del() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcMonitorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcMonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcMonitorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcMonitorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcMonitorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcMonitorRequest)
    MergeFrom(*source);
  }
}

void ProcMonitorRequest::MergeFrom(const ProcMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcMonitorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  if (from.add_del() != 0) {
    _internal_set_add_del(from._internal_add_del());
  }
}

void ProcMonitorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcMonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcMonitorRequest::CopyFrom(const ProcMonitorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcMonitorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcMonitorRequest::IsInitialized() const {
  return true;
}

void ProcMonitorRequest::InternalSwap(ProcMonitorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.InternalSwap(&other->name_);
  swap(add_del_, other->add_del_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcMonitorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellExe::InitAsDefaultInstance() {
}
class ShellExe::_Internal {
 public:
};

ShellExe::ShellExe()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShellExe)
}
ShellExe::ShellExe(const ShellExe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shellnum_ = from.shellnum_;
  // @@protoc_insertion_point(copy_constructor:ShellExe)
}

void ShellExe::SharedCtor() {
  shellnum_ = 0;
}

ShellExe::~ShellExe() {
  // @@protoc_insertion_point(destructor:ShellExe)
  SharedDtor();
}

void ShellExe::SharedDtor() {
}

void ShellExe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellExe& ShellExe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellExe_PMonitor_2eproto.base);
  return *internal_default_instance();
}


void ShellExe::Clear() {
// @@protoc_insertion_point(message_clear_start:ShellExe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shellnum_ = 0;
  _internal_metadata_.Clear();
}

const char* ShellExe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shellnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shellnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellExe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShellExe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shellnum = 1;
  if (this->shellnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shellnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShellExe)
  return target;
}

size_t ShellExe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShellExe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shellnum = 1;
  if (this->shellnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shellnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellExe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShellExe)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellExe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellExe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShellExe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShellExe)
    MergeFrom(*source);
  }
}

void ShellExe::MergeFrom(const ShellExe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShellExe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shellnum() != 0) {
    _internal_set_shellnum(from._internal_shellnum());
  }
}

void ShellExe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShellExe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellExe::CopyFrom(const ShellExe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShellExe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellExe::IsInitialized() const {
  return true;
}

void ShellExe::InternalSwap(ShellExe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shellnum_, other->shellnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellExe::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CpuMessage* Arena::CreateMaybeMessage< ::CpuMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CpuMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MemMessage* Arena::CreateMaybeMessage< ::MemMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MemMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMessage* Arena::CreateMaybeMessage< ::NetMessage >(Arena* arena) {
  return Arena::CreateInternal< ::NetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessMessage* Arena::CreateMaybeMessage< ::ProcessMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ProcessMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MonitorMessage* Arena::CreateMaybeMessage< ::MonitorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MonitorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcMonitorRequest* Arena::CreateMaybeMessage< ::ProcMonitorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ProcMonitorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ShellExe* Arena::CreateMaybeMessage< ::ShellExe >(Arena* arena) {
  return Arena::CreateInternal< ::ShellExe >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
