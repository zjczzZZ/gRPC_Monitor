// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMonitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PMonitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PMonitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PMonitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PMonitor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PMonitor_2eproto;
class CpuMessage;
class CpuMessageDefaultTypeInternal;
extern CpuMessageDefaultTypeInternal _CpuMessage_default_instance_;
class MemMessage;
class MemMessageDefaultTypeInternal;
extern MemMessageDefaultTypeInternal _MemMessage_default_instance_;
class MonitorMessage;
class MonitorMessageDefaultTypeInternal;
extern MonitorMessageDefaultTypeInternal _MonitorMessage_default_instance_;
class NetMessage;
class NetMessageDefaultTypeInternal;
extern NetMessageDefaultTypeInternal _NetMessage_default_instance_;
class ProcMonitorRequest;
class ProcMonitorRequestDefaultTypeInternal;
extern ProcMonitorRequestDefaultTypeInternal _ProcMonitorRequest_default_instance_;
class ProcessMessage;
class ProcessMessageDefaultTypeInternal;
extern ProcessMessageDefaultTypeInternal _ProcessMessage_default_instance_;
class ShellExe;
class ShellExeDefaultTypeInternal;
extern ShellExeDefaultTypeInternal _ShellExe_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CpuMessage* Arena::CreateMaybeMessage<::CpuMessage>(Arena*);
template<> ::MemMessage* Arena::CreateMaybeMessage<::MemMessage>(Arena*);
template<> ::MonitorMessage* Arena::CreateMaybeMessage<::MonitorMessage>(Arena*);
template<> ::NetMessage* Arena::CreateMaybeMessage<::NetMessage>(Arena*);
template<> ::ProcMonitorRequest* Arena::CreateMaybeMessage<::ProcMonitorRequest>(Arena*);
template<> ::ProcessMessage* Arena::CreateMaybeMessage<::ProcessMessage>(Arena*);
template<> ::ShellExe* Arena::CreateMaybeMessage<::ShellExe>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CpuMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CpuMessage) */ {
 public:
  CpuMessage();
  virtual ~CpuMessage();

  CpuMessage(const CpuMessage& from);
  CpuMessage(CpuMessage&& from) noexcept
    : CpuMessage() {
    *this = ::std::move(from);
  }

  inline CpuMessage& operator=(const CpuMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuMessage& operator=(CpuMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuMessage* internal_default_instance() {
    return reinterpret_cast<const CpuMessage*>(
               &_CpuMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuMessage& a, CpuMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuMessage* New() const final {
    return CreateMaybeMessage<CpuMessage>(nullptr);
  }

  CpuMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuMessage& from);
  void MergeFrom(const CpuMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CpuMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
  };
  // double load = 1;
  void clear_load();
  double load() const;
  void set_load(double value);
  private:
  double _internal_load() const;
  void _internal_set_load(double value);
  public:

  // @@protoc_insertion_point(class_scope:CpuMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class MemMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemMessage) */ {
 public:
  MemMessage();
  virtual ~MemMessage();

  MemMessage(const MemMessage& from);
  MemMessage(MemMessage&& from) noexcept
    : MemMessage() {
    *this = ::std::move(from);
  }

  inline MemMessage& operator=(const MemMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemMessage& operator=(MemMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemMessage* internal_default_instance() {
    return reinterpret_cast<const MemMessage*>(
               &_MemMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemMessage& a, MemMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemMessage* New() const final {
    return CreateMaybeMessage<MemMessage>(nullptr);
  }

  MemMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemMessage& from);
  void MergeFrom(const MemMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemUseFieldNumber = 1,
    kMemRateFieldNumber = 2,
  };
  // double mem_use = 1;
  void clear_mem_use();
  double mem_use() const;
  void set_mem_use(double value);
  private:
  double _internal_mem_use() const;
  void _internal_set_mem_use(double value);
  public:

  // double mem_rate = 2;
  void clear_mem_rate();
  double mem_rate() const;
  void set_mem_rate(double value);
  private:
  double _internal_mem_rate() const;
  void _internal_set_mem_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:MemMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double mem_use_;
  double mem_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class NetMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetMessage) */ {
 public:
  NetMessage();
  virtual ~NetMessage();

  NetMessage(const NetMessage& from);
  NetMessage(NetMessage&& from) noexcept
    : NetMessage() {
    *this = ::std::move(from);
  }

  inline NetMessage& operator=(const NetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetMessage& operator=(NetMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetMessage* internal_default_instance() {
    return reinterpret_cast<const NetMessage*>(
               &_NetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetMessage& a, NetMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NetMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetMessage* New() const final {
    return CreateMaybeMessage<NetMessage>(nullptr);
  }

  NetMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetMessage& from);
  void MergeFrom(const NetMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetRecvRateFieldNumber = 1,
    kNetSendRateFieldNumber = 2,
  };
  // double net_recv_Rate = 1;
  void clear_net_recv_rate();
  double net_recv_rate() const;
  void set_net_recv_rate(double value);
  private:
  double _internal_net_recv_rate() const;
  void _internal_set_net_recv_rate(double value);
  public:

  // double net_send_Rate = 2;
  void clear_net_send_rate();
  double net_send_rate() const;
  void set_net_send_rate(double value);
  private:
  double _internal_net_send_rate() const;
  void _internal_set_net_send_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:NetMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double net_recv_rate_;
  double net_send_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class ProcessMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessMessage) */ {
 public:
  ProcessMessage();
  virtual ~ProcessMessage();

  ProcessMessage(const ProcessMessage& from);
  ProcessMessage(ProcessMessage&& from) noexcept
    : ProcessMessage() {
    *this = ::std::move(from);
  }

  inline ProcessMessage& operator=(const ProcessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMessage& operator=(ProcessMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessMessage* internal_default_instance() {
    return reinterpret_cast<const ProcessMessage*>(
               &_ProcessMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessMessage& a, ProcessMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessMessage* New() const final {
    return CreateMaybeMessage<ProcessMessage>(nullptr);
  }

  ProcessMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessMessage& from);
  void MergeFrom(const ProcessMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcNameFieldNumber = 1,
    kCpuLoadFieldNumber = 3,
    kMemLoadFieldNumber = 4,
    kMemUseFieldNumber = 5,
    kNetRecvRateFieldNumber = 6,
    kNetSendRateFieldNumber = 7,
    kIsRunningFieldNumber = 2,
  };
  // string proc_Name = 1;
  void clear_proc_name();
  const std::string& proc_name() const;
  void set_proc_name(const std::string& value);
  void set_proc_name(std::string&& value);
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  std::string* mutable_proc_name();
  std::string* release_proc_name();
  void set_allocated_proc_name(std::string* proc_name);
  private:
  const std::string& _internal_proc_name() const;
  void _internal_set_proc_name(const std::string& value);
  std::string* _internal_mutable_proc_name();
  public:

  // double cpu_load = 3;
  void clear_cpu_load();
  double cpu_load() const;
  void set_cpu_load(double value);
  private:
  double _internal_cpu_load() const;
  void _internal_set_cpu_load(double value);
  public:

  // double mem_load = 4;
  void clear_mem_load();
  double mem_load() const;
  void set_mem_load(double value);
  private:
  double _internal_mem_load() const;
  void _internal_set_mem_load(double value);
  public:

  // double mem_use = 5;
  void clear_mem_use();
  double mem_use() const;
  void set_mem_use(double value);
  private:
  double _internal_mem_use() const;
  void _internal_set_mem_use(double value);
  public:

  // double net_recv_Rate = 6;
  void clear_net_recv_rate();
  double net_recv_rate() const;
  void set_net_recv_rate(double value);
  private:
  double _internal_net_recv_rate() const;
  void _internal_set_net_recv_rate(double value);
  public:

  // double net_send_Rate = 7;
  void clear_net_send_rate();
  double net_send_rate() const;
  void set_net_send_rate(double value);
  private:
  double _internal_net_send_rate() const;
  void _internal_set_net_send_rate(double value);
  public:

  // bool isRunning = 2;
  void clear_isrunning();
  bool isrunning() const;
  void set_isrunning(bool value);
  private:
  bool _internal_isrunning() const;
  void _internal_set_isrunning(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proc_name_;
  double cpu_load_;
  double mem_load_;
  double mem_use_;
  double net_recv_rate_;
  double net_send_rate_;
  bool isrunning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class MonitorMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MonitorMessage) */ {
 public:
  MonitorMessage();
  virtual ~MonitorMessage();

  MonitorMessage(const MonitorMessage& from);
  MonitorMessage(MonitorMessage&& from) noexcept
    : MonitorMessage() {
    *this = ::std::move(from);
  }

  inline MonitorMessage& operator=(const MonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorMessage& operator=(MonitorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorMessage* internal_default_instance() {
    return reinterpret_cast<const MonitorMessage*>(
               &_MonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonitorMessage& a, MonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorMessage* New() const final {
    return CreateMaybeMessage<MonitorMessage>(nullptr);
  }

  MonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorMessage& from);
  void MergeFrom(const MonitorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MonitorMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcmFieldNumber = 4,
    kCpumFieldNumber = 1,
    kMemmFieldNumber = 2,
    kNetmFieldNumber = 3,
  };
  // repeated .ProcessMessage procm = 4;
  int procm_size() const;
  private:
  int _internal_procm_size() const;
  public:
  void clear_procm();
  ::ProcessMessage* mutable_procm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >*
      mutable_procm();
  private:
  const ::ProcessMessage& _internal_procm(int index) const;
  ::ProcessMessage* _internal_add_procm();
  public:
  const ::ProcessMessage& procm(int index) const;
  ::ProcessMessage* add_procm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >&
      procm() const;

  // .CpuMessage cpum = 1;
  bool has_cpum() const;
  private:
  bool _internal_has_cpum() const;
  public:
  void clear_cpum();
  const ::CpuMessage& cpum() const;
  ::CpuMessage* release_cpum();
  ::CpuMessage* mutable_cpum();
  void set_allocated_cpum(::CpuMessage* cpum);
  private:
  const ::CpuMessage& _internal_cpum() const;
  ::CpuMessage* _internal_mutable_cpum();
  public:

  // .MemMessage memm = 2;
  bool has_memm() const;
  private:
  bool _internal_has_memm() const;
  public:
  void clear_memm();
  const ::MemMessage& memm() const;
  ::MemMessage* release_memm();
  ::MemMessage* mutable_memm();
  void set_allocated_memm(::MemMessage* memm);
  private:
  const ::MemMessage& _internal_memm() const;
  ::MemMessage* _internal_mutable_memm();
  public:

  // .NetMessage netm = 3;
  bool has_netm() const;
  private:
  bool _internal_has_netm() const;
  public:
  void clear_netm();
  const ::NetMessage& netm() const;
  ::NetMessage* release_netm();
  ::NetMessage* mutable_netm();
  void set_allocated_netm(::NetMessage* netm);
  private:
  const ::NetMessage& _internal_netm() const;
  ::NetMessage* _internal_mutable_netm();
  public:

  // @@protoc_insertion_point(class_scope:MonitorMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage > procm_;
  ::CpuMessage* cpum_;
  ::MemMessage* memm_;
  ::NetMessage* netm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class ProcMonitorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcMonitorRequest) */ {
 public:
  ProcMonitorRequest();
  virtual ~ProcMonitorRequest();

  ProcMonitorRequest(const ProcMonitorRequest& from);
  ProcMonitorRequest(ProcMonitorRequest&& from) noexcept
    : ProcMonitorRequest() {
    *this = ::std::move(from);
  }

  inline ProcMonitorRequest& operator=(const ProcMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcMonitorRequest& operator=(ProcMonitorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcMonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const ProcMonitorRequest*>(
               &_ProcMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcMonitorRequest& a, ProcMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcMonitorRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcMonitorRequest* New() const final {
    return CreateMaybeMessage<ProcMonitorRequest>(nullptr);
  }

  ProcMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcMonitorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcMonitorRequest& from);
  void MergeFrom(const ProcMonitorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcMonitorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcMonitorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddDelFieldNumber = 1,
  };
  // repeated string name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // bool add_del = 1;
  void clear_add_del();
  bool add_del() const;
  void set_add_del(bool value);
  private:
  bool _internal_add_del() const;
  void _internal_set_add_del(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProcMonitorRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  bool add_del_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// -------------------------------------------------------------------

class ShellExe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShellExe) */ {
 public:
  ShellExe();
  virtual ~ShellExe();

  ShellExe(const ShellExe& from);
  ShellExe(ShellExe&& from) noexcept
    : ShellExe() {
    *this = ::std::move(from);
  }

  inline ShellExe& operator=(const ShellExe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellExe& operator=(ShellExe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShellExe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellExe* internal_default_instance() {
    return reinterpret_cast<const ShellExe*>(
               &_ShellExe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShellExe& a, ShellExe& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellExe* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellExe* New() const final {
    return CreateMaybeMessage<ShellExe>(nullptr);
  }

  ShellExe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellExe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShellExe& from);
  void MergeFrom(const ShellExe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellExe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShellExe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PMonitor_2eproto);
    return ::descriptor_table_PMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShellnumFieldNumber = 1,
  };
  // int32 shellnum = 1;
  void clear_shellnum();
  ::PROTOBUF_NAMESPACE_ID::int32 shellnum() const;
  void set_shellnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shellnum() const;
  void _internal_set_shellnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShellExe)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 shellnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PMonitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuMessage

// double load = 1;
inline void CpuMessage::clear_load() {
  load_ = 0;
}
inline double CpuMessage::_internal_load() const {
  return load_;
}
inline double CpuMessage::load() const {
  // @@protoc_insertion_point(field_get:CpuMessage.load)
  return _internal_load();
}
inline void CpuMessage::_internal_set_load(double value) {
  
  load_ = value;
}
inline void CpuMessage::set_load(double value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:CpuMessage.load)
}

// -------------------------------------------------------------------

// MemMessage

// double mem_use = 1;
inline void MemMessage::clear_mem_use() {
  mem_use_ = 0;
}
inline double MemMessage::_internal_mem_use() const {
  return mem_use_;
}
inline double MemMessage::mem_use() const {
  // @@protoc_insertion_point(field_get:MemMessage.mem_use)
  return _internal_mem_use();
}
inline void MemMessage::_internal_set_mem_use(double value) {
  
  mem_use_ = value;
}
inline void MemMessage::set_mem_use(double value) {
  _internal_set_mem_use(value);
  // @@protoc_insertion_point(field_set:MemMessage.mem_use)
}

// double mem_rate = 2;
inline void MemMessage::clear_mem_rate() {
  mem_rate_ = 0;
}
inline double MemMessage::_internal_mem_rate() const {
  return mem_rate_;
}
inline double MemMessage::mem_rate() const {
  // @@protoc_insertion_point(field_get:MemMessage.mem_rate)
  return _internal_mem_rate();
}
inline void MemMessage::_internal_set_mem_rate(double value) {
  
  mem_rate_ = value;
}
inline void MemMessage::set_mem_rate(double value) {
  _internal_set_mem_rate(value);
  // @@protoc_insertion_point(field_set:MemMessage.mem_rate)
}

// -------------------------------------------------------------------

// NetMessage

// double net_recv_Rate = 1;
inline void NetMessage::clear_net_recv_rate() {
  net_recv_rate_ = 0;
}
inline double NetMessage::_internal_net_recv_rate() const {
  return net_recv_rate_;
}
inline double NetMessage::net_recv_rate() const {
  // @@protoc_insertion_point(field_get:NetMessage.net_recv_Rate)
  return _internal_net_recv_rate();
}
inline void NetMessage::_internal_set_net_recv_rate(double value) {
  
  net_recv_rate_ = value;
}
inline void NetMessage::set_net_recv_rate(double value) {
  _internal_set_net_recv_rate(value);
  // @@protoc_insertion_point(field_set:NetMessage.net_recv_Rate)
}

// double net_send_Rate = 2;
inline void NetMessage::clear_net_send_rate() {
  net_send_rate_ = 0;
}
inline double NetMessage::_internal_net_send_rate() const {
  return net_send_rate_;
}
inline double NetMessage::net_send_rate() const {
  // @@protoc_insertion_point(field_get:NetMessage.net_send_Rate)
  return _internal_net_send_rate();
}
inline void NetMessage::_internal_set_net_send_rate(double value) {
  
  net_send_rate_ = value;
}
inline void NetMessage::set_net_send_rate(double value) {
  _internal_set_net_send_rate(value);
  // @@protoc_insertion_point(field_set:NetMessage.net_send_Rate)
}

// -------------------------------------------------------------------

// ProcessMessage

// string proc_Name = 1;
inline void ProcessMessage::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessMessage::proc_name() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.proc_Name)
  return _internal_proc_name();
}
inline void ProcessMessage::set_proc_name(const std::string& value) {
  _internal_set_proc_name(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.proc_Name)
}
inline std::string* ProcessMessage::mutable_proc_name() {
  // @@protoc_insertion_point(field_mutable:ProcessMessage.proc_Name)
  return _internal_mutable_proc_name();
}
inline const std::string& ProcessMessage::_internal_proc_name() const {
  return proc_name_.GetNoArena();
}
inline void ProcessMessage::_internal_set_proc_name(const std::string& value) {
  
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessMessage::set_proc_name(std::string&& value) {
  
  proc_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProcessMessage.proc_Name)
}
inline void ProcessMessage::set_proc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProcessMessage.proc_Name)
}
inline void ProcessMessage::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProcessMessage.proc_Name)
}
inline std::string* ProcessMessage::_internal_mutable_proc_name() {
  
  return proc_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessMessage::release_proc_name() {
  // @@protoc_insertion_point(field_release:ProcessMessage.proc_Name)
  
  return proc_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessMessage::set_allocated_proc_name(std::string* proc_name) {
  if (proc_name != nullptr) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:ProcessMessage.proc_Name)
}

// bool isRunning = 2;
inline void ProcessMessage::clear_isrunning() {
  isrunning_ = false;
}
inline bool ProcessMessage::_internal_isrunning() const {
  return isrunning_;
}
inline bool ProcessMessage::isrunning() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.isRunning)
  return _internal_isrunning();
}
inline void ProcessMessage::_internal_set_isrunning(bool value) {
  
  isrunning_ = value;
}
inline void ProcessMessage::set_isrunning(bool value) {
  _internal_set_isrunning(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.isRunning)
}

// double cpu_load = 3;
inline void ProcessMessage::clear_cpu_load() {
  cpu_load_ = 0;
}
inline double ProcessMessage::_internal_cpu_load() const {
  return cpu_load_;
}
inline double ProcessMessage::cpu_load() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.cpu_load)
  return _internal_cpu_load();
}
inline void ProcessMessage::_internal_set_cpu_load(double value) {
  
  cpu_load_ = value;
}
inline void ProcessMessage::set_cpu_load(double value) {
  _internal_set_cpu_load(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.cpu_load)
}

// double mem_load = 4;
inline void ProcessMessage::clear_mem_load() {
  mem_load_ = 0;
}
inline double ProcessMessage::_internal_mem_load() const {
  return mem_load_;
}
inline double ProcessMessage::mem_load() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.mem_load)
  return _internal_mem_load();
}
inline void ProcessMessage::_internal_set_mem_load(double value) {
  
  mem_load_ = value;
}
inline void ProcessMessage::set_mem_load(double value) {
  _internal_set_mem_load(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.mem_load)
}

// double mem_use = 5;
inline void ProcessMessage::clear_mem_use() {
  mem_use_ = 0;
}
inline double ProcessMessage::_internal_mem_use() const {
  return mem_use_;
}
inline double ProcessMessage::mem_use() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.mem_use)
  return _internal_mem_use();
}
inline void ProcessMessage::_internal_set_mem_use(double value) {
  
  mem_use_ = value;
}
inline void ProcessMessage::set_mem_use(double value) {
  _internal_set_mem_use(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.mem_use)
}

// double net_recv_Rate = 6;
inline void ProcessMessage::clear_net_recv_rate() {
  net_recv_rate_ = 0;
}
inline double ProcessMessage::_internal_net_recv_rate() const {
  return net_recv_rate_;
}
inline double ProcessMessage::net_recv_rate() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.net_recv_Rate)
  return _internal_net_recv_rate();
}
inline void ProcessMessage::_internal_set_net_recv_rate(double value) {
  
  net_recv_rate_ = value;
}
inline void ProcessMessage::set_net_recv_rate(double value) {
  _internal_set_net_recv_rate(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.net_recv_Rate)
}

// double net_send_Rate = 7;
inline void ProcessMessage::clear_net_send_rate() {
  net_send_rate_ = 0;
}
inline double ProcessMessage::_internal_net_send_rate() const {
  return net_send_rate_;
}
inline double ProcessMessage::net_send_rate() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.net_send_Rate)
  return _internal_net_send_rate();
}
inline void ProcessMessage::_internal_set_net_send_rate(double value) {
  
  net_send_rate_ = value;
}
inline void ProcessMessage::set_net_send_rate(double value) {
  _internal_set_net_send_rate(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.net_send_Rate)
}

// -------------------------------------------------------------------

// MonitorMessage

// .CpuMessage cpum = 1;
inline bool MonitorMessage::_internal_has_cpum() const {
  return this != internal_default_instance() && cpum_ != nullptr;
}
inline bool MonitorMessage::has_cpum() const {
  return _internal_has_cpum();
}
inline void MonitorMessage::clear_cpum() {
  if (GetArenaNoVirtual() == nullptr && cpum_ != nullptr) {
    delete cpum_;
  }
  cpum_ = nullptr;
}
inline const ::CpuMessage& MonitorMessage::_internal_cpum() const {
  const ::CpuMessage* p = cpum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CpuMessage*>(
      &::_CpuMessage_default_instance_);
}
inline const ::CpuMessage& MonitorMessage::cpum() const {
  // @@protoc_insertion_point(field_get:MonitorMessage.cpum)
  return _internal_cpum();
}
inline ::CpuMessage* MonitorMessage::release_cpum() {
  // @@protoc_insertion_point(field_release:MonitorMessage.cpum)
  
  ::CpuMessage* temp = cpum_;
  cpum_ = nullptr;
  return temp;
}
inline ::CpuMessage* MonitorMessage::_internal_mutable_cpum() {
  
  if (cpum_ == nullptr) {
    auto* p = CreateMaybeMessage<::CpuMessage>(GetArenaNoVirtual());
    cpum_ = p;
  }
  return cpum_;
}
inline ::CpuMessage* MonitorMessage::mutable_cpum() {
  // @@protoc_insertion_point(field_mutable:MonitorMessage.cpum)
  return _internal_mutable_cpum();
}
inline void MonitorMessage::set_allocated_cpum(::CpuMessage* cpum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cpum_;
  }
  if (cpum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpum, submessage_arena);
    }
    
  } else {
    
  }
  cpum_ = cpum;
  // @@protoc_insertion_point(field_set_allocated:MonitorMessage.cpum)
}

// .MemMessage memm = 2;
inline bool MonitorMessage::_internal_has_memm() const {
  return this != internal_default_instance() && memm_ != nullptr;
}
inline bool MonitorMessage::has_memm() const {
  return _internal_has_memm();
}
inline void MonitorMessage::clear_memm() {
  if (GetArenaNoVirtual() == nullptr && memm_ != nullptr) {
    delete memm_;
  }
  memm_ = nullptr;
}
inline const ::MemMessage& MonitorMessage::_internal_memm() const {
  const ::MemMessage* p = memm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MemMessage*>(
      &::_MemMessage_default_instance_);
}
inline const ::MemMessage& MonitorMessage::memm() const {
  // @@protoc_insertion_point(field_get:MonitorMessage.memm)
  return _internal_memm();
}
inline ::MemMessage* MonitorMessage::release_memm() {
  // @@protoc_insertion_point(field_release:MonitorMessage.memm)
  
  ::MemMessage* temp = memm_;
  memm_ = nullptr;
  return temp;
}
inline ::MemMessage* MonitorMessage::_internal_mutable_memm() {
  
  if (memm_ == nullptr) {
    auto* p = CreateMaybeMessage<::MemMessage>(GetArenaNoVirtual());
    memm_ = p;
  }
  return memm_;
}
inline ::MemMessage* MonitorMessage::mutable_memm() {
  // @@protoc_insertion_point(field_mutable:MonitorMessage.memm)
  return _internal_mutable_memm();
}
inline void MonitorMessage::set_allocated_memm(::MemMessage* memm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memm_;
  }
  if (memm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memm, submessage_arena);
    }
    
  } else {
    
  }
  memm_ = memm;
  // @@protoc_insertion_point(field_set_allocated:MonitorMessage.memm)
}

// .NetMessage netm = 3;
inline bool MonitorMessage::_internal_has_netm() const {
  return this != internal_default_instance() && netm_ != nullptr;
}
inline bool MonitorMessage::has_netm() const {
  return _internal_has_netm();
}
inline void MonitorMessage::clear_netm() {
  if (GetArenaNoVirtual() == nullptr && netm_ != nullptr) {
    delete netm_;
  }
  netm_ = nullptr;
}
inline const ::NetMessage& MonitorMessage::_internal_netm() const {
  const ::NetMessage* p = netm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NetMessage*>(
      &::_NetMessage_default_instance_);
}
inline const ::NetMessage& MonitorMessage::netm() const {
  // @@protoc_insertion_point(field_get:MonitorMessage.netm)
  return _internal_netm();
}
inline ::NetMessage* MonitorMessage::release_netm() {
  // @@protoc_insertion_point(field_release:MonitorMessage.netm)
  
  ::NetMessage* temp = netm_;
  netm_ = nullptr;
  return temp;
}
inline ::NetMessage* MonitorMessage::_internal_mutable_netm() {
  
  if (netm_ == nullptr) {
    auto* p = CreateMaybeMessage<::NetMessage>(GetArenaNoVirtual());
    netm_ = p;
  }
  return netm_;
}
inline ::NetMessage* MonitorMessage::mutable_netm() {
  // @@protoc_insertion_point(field_mutable:MonitorMessage.netm)
  return _internal_mutable_netm();
}
inline void MonitorMessage::set_allocated_netm(::NetMessage* netm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete netm_;
  }
  if (netm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      netm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netm, submessage_arena);
    }
    
  } else {
    
  }
  netm_ = netm;
  // @@protoc_insertion_point(field_set_allocated:MonitorMessage.netm)
}

// repeated .ProcessMessage procm = 4;
inline int MonitorMessage::_internal_procm_size() const {
  return procm_.size();
}
inline int MonitorMessage::procm_size() const {
  return _internal_procm_size();
}
inline void MonitorMessage::clear_procm() {
  procm_.Clear();
}
inline ::ProcessMessage* MonitorMessage::mutable_procm(int index) {
  // @@protoc_insertion_point(field_mutable:MonitorMessage.procm)
  return procm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >*
MonitorMessage::mutable_procm() {
  // @@protoc_insertion_point(field_mutable_list:MonitorMessage.procm)
  return &procm_;
}
inline const ::ProcessMessage& MonitorMessage::_internal_procm(int index) const {
  return procm_.Get(index);
}
inline const ::ProcessMessage& MonitorMessage::procm(int index) const {
  // @@protoc_insertion_point(field_get:MonitorMessage.procm)
  return _internal_procm(index);
}
inline ::ProcessMessage* MonitorMessage::_internal_add_procm() {
  return procm_.Add();
}
inline ::ProcessMessage* MonitorMessage::add_procm() {
  // @@protoc_insertion_point(field_add:MonitorMessage.procm)
  return _internal_add_procm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >&
MonitorMessage::procm() const {
  // @@protoc_insertion_point(field_list:MonitorMessage.procm)
  return procm_;
}

// -------------------------------------------------------------------

// ProcMonitorRequest

// bool add_del = 1;
inline void ProcMonitorRequest::clear_add_del() {
  add_del_ = false;
}
inline bool ProcMonitorRequest::_internal_add_del() const {
  return add_del_;
}
inline bool ProcMonitorRequest::add_del() const {
  // @@protoc_insertion_point(field_get:ProcMonitorRequest.add_del)
  return _internal_add_del();
}
inline void ProcMonitorRequest::_internal_set_add_del(bool value) {
  
  add_del_ = value;
}
inline void ProcMonitorRequest::set_add_del(bool value) {
  _internal_set_add_del(value);
  // @@protoc_insertion_point(field_set:ProcMonitorRequest.add_del)
}

// repeated string name = 2;
inline int ProcMonitorRequest::_internal_name_size() const {
  return name_.size();
}
inline int ProcMonitorRequest::name_size() const {
  return _internal_name_size();
}
inline void ProcMonitorRequest::clear_name() {
  name_.Clear();
}
inline std::string* ProcMonitorRequest::add_name() {
  // @@protoc_insertion_point(field_add_mutable:ProcMonitorRequest.name)
  return _internal_add_name();
}
inline const std::string& ProcMonitorRequest::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& ProcMonitorRequest::name(int index) const {
  // @@protoc_insertion_point(field_get:ProcMonitorRequest.name)
  return _internal_name(index);
}
inline std::string* ProcMonitorRequest::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:ProcMonitorRequest.name)
  return name_.Mutable(index);
}
inline void ProcMonitorRequest::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProcMonitorRequest.name)
  name_.Mutable(index)->assign(value);
}
inline void ProcMonitorRequest::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProcMonitorRequest.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void ProcMonitorRequest::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProcMonitorRequest.name)
}
inline void ProcMonitorRequest::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProcMonitorRequest.name)
}
inline std::string* ProcMonitorRequest::_internal_add_name() {
  return name_.Add();
}
inline void ProcMonitorRequest::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProcMonitorRequest.name)
}
inline void ProcMonitorRequest::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProcMonitorRequest.name)
}
inline void ProcMonitorRequest::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProcMonitorRequest.name)
}
inline void ProcMonitorRequest::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProcMonitorRequest.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcMonitorRequest::name() const {
  // @@protoc_insertion_point(field_list:ProcMonitorRequest.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcMonitorRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:ProcMonitorRequest.name)
  return &name_;
}

// -------------------------------------------------------------------

// ShellExe

// int32 shellnum = 1;
inline void ShellExe::clear_shellnum() {
  shellnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShellExe::_internal_shellnum() const {
  return shellnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShellExe::shellnum() const {
  // @@protoc_insertion_point(field_get:ShellExe.shellnum)
  return _internal_shellnum();
}
inline void ShellExe::_internal_set_shellnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shellnum_ = value;
}
inline void ShellExe::set_shellnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shellnum(value);
  // @@protoc_insertion_point(field_set:ShellExe.shellnum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PMonitor_2eproto
