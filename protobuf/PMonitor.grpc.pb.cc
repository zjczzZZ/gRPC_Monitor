// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PMonitor.proto

#include "PMonitor.pb.h"
#include "PMonitor.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* GrpcService_method_names[] = {
  "/GrpcService/MonitorTick",
  "/GrpcService/ProcessMonitorCtrl",
  "/GrpcService/ShellControl",
};

std::unique_ptr< GrpcService::Stub> GrpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcService::Stub> stub(new GrpcService::Stub(channel));
  return stub;
}

GrpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_MonitorTick_(GrpcService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ProcessMonitorCtrl_(GrpcService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShellControl_(GrpcService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::MonitorMessage>* GrpcService::Stub::MonitorTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::MonitorMessage>::Create(channel_.get(), rpcmethod_MonitorTick_, context, request);
}

void GrpcService::Stub::experimental_async::MonitorTick(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::MonitorMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::MonitorMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_MonitorTick_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MonitorMessage>* GrpcService::Stub::AsyncMonitorTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::MonitorMessage>::Create(channel_.get(), cq, rpcmethod_MonitorTick_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MonitorMessage>* GrpcService::Stub::PrepareAsyncMonitorTickRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::MonitorMessage>::Create(channel_.get(), cq, rpcmethod_MonitorTick_, context, request, false, nullptr);
}

::grpc::Status GrpcService::Stub::ProcessMonitorCtrl(::grpc::ClientContext* context, const ::ProcMonitorRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessMonitorCtrl_, context, request, response);
}

void GrpcService::Stub::experimental_async::ProcessMonitorCtrl(::grpc::ClientContext* context, const ::ProcMonitorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessMonitorCtrl_, context, request, response, std::move(f));
}

void GrpcService::Stub::experimental_async::ProcessMonitorCtrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessMonitorCtrl_, context, request, response, std::move(f));
}

void GrpcService::Stub::experimental_async::ProcessMonitorCtrl(::grpc::ClientContext* context, const ::ProcMonitorRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessMonitorCtrl_, context, request, response, reactor);
}

void GrpcService::Stub::experimental_async::ProcessMonitorCtrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessMonitorCtrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcService::Stub::AsyncProcessMonitorCtrlRaw(::grpc::ClientContext* context, const ::ProcMonitorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ProcessMonitorCtrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcService::Stub::PrepareAsyncProcessMonitorCtrlRaw(::grpc::ClientContext* context, const ::ProcMonitorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ProcessMonitorCtrl_, context, request, false);
}

::grpc::Status GrpcService::Stub::ShellControl(::grpc::ClientContext* context, const ::ShellExe& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShellControl_, context, request, response);
}

void GrpcService::Stub::experimental_async::ShellControl(::grpc::ClientContext* context, const ::ShellExe* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShellControl_, context, request, response, std::move(f));
}

void GrpcService::Stub::experimental_async::ShellControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShellControl_, context, request, response, std::move(f));
}

void GrpcService::Stub::experimental_async::ShellControl(::grpc::ClientContext* context, const ::ShellExe* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShellControl_, context, request, response, reactor);
}

void GrpcService::Stub::experimental_async::ShellControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShellControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcService::Stub::AsyncShellControlRaw(::grpc::ClientContext* context, const ::ShellExe& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ShellControl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcService::Stub::PrepareAsyncShellControlRaw(::grpc::ClientContext* context, const ::ShellExe& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ShellControl_, context, request, false);
}

GrpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GrpcService::Service, ::google::protobuf::Empty, ::MonitorMessage>(
          std::mem_fn(&GrpcService::Service::MonitorTick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::ProcMonitorRequest, ::google::protobuf::Empty>(
          std::mem_fn(&GrpcService::Service::ProcessMonitorCtrl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcService::Service, ::ShellExe, ::google::protobuf::Empty>(
          std::mem_fn(&GrpcService::Service::ShellControl), this)));
}

GrpcService::Service::~Service() {
}

::grpc::Status GrpcService::Service::MonitorTick(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::MonitorMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::ProcessMonitorCtrl(::grpc::ServerContext* context, const ::ProcMonitorRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcService::Service::ShellControl(::grpc::ServerContext* context, const ::ShellExe* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


